import { UnitsMetadataStore } from './types'

/**
 * Built-in unit metadata for SignalK paths
 * 
 * Enhanced with js-quantities for high-precision formulas
 * Generated: 2025-10-27T01:37:09.589Z
 */
export const builtInUnits: UnitsMetadataStore = {
  // airHeight
  'design.airHeight': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // beam
  'design.beam': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // maximum
  'design.draft.maximum': {
    baseUnit: 'm',
    category: 'depth',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      }
    }
  },

  // overall
  'design.length.overall': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // consumedCharge
  'electrical.batteries.*.capacity.consumedCharge': {
    baseUnit: 'C',
    category: 'charge',
    conversions: {
      'C': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'C'
      },
      'Ah': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'Ah'
      },
      'mAh': {
        formula: 'value * 0.2777777777777778',
        inverseFormula: 'value / 0.2777777777777778',
        symbol: 'mAh'
      }
    }
  },

  // stateOfCharge
  'electrical.batteries.*.capacity.stateOfCharge': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // timeRemaining
  'electrical.batteries.*.capacity.timeRemaining': {
    baseUnit: 's',
    category: 'time',
    conversions: {
      's': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 's'
      },
      'min': {
        formula: 'value * 0.016666666666666666',
        inverseFormula: 'value / 0.016666666666666666',
        symbol: 'min'
      },
      'h': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'h'
      },
      'days': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'days'
      },
      'd': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'd'
      },
      'week': {
        formula: 'value * 0.000001653439153439154',
        inverseFormula: 'value / 0.000001653439153439154',
        symbol: 'week'
      }
    }
  },

  // current
  'electrical.batteries.*.current': {
    baseUnit: 'A',
    category: 'current',
    conversions: {
      'A': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'A'
      },
      'mA': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mA'
      },
      'kA': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kA'
      }
    }
  },

  // lifetimeDischarge
  'electrical.batteries.*.lifetimeDischarge': {
    baseUnit: 'C',
    category: 'charge',
    conversions: {
      'C': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'C'
      },
      'Ah': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'Ah'
      },
      'kAh': {
        formula: 'value * 2.777777777777778e-7',
        inverseFormula: 'value / 2.777777777777778e-7',
        symbol: 'kAh'
      },
      'mAh': {
        formula: 'value * 0.2777777777777778',
        inverseFormula: 'value / 0.2777777777777778',
        symbol: 'mAh'
      }
    }
  },

  // power
  'electrical.batteries.*.power': {
    baseUnit: 'W',
    category: 'power',
    conversions: {
      'W': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'W'
      },
      'kW': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kW'
      },
      'hp': {
        formula: 'value * 0.0013410220888438076',
        inverseFormula: 'value / 0.0013410220888438076',
        symbol: 'hp'
      },
      'MW': {
        formula: 'value * 0.000001',
        inverseFormula: 'value / 0.000001',
        symbol: 'MW'
      }
    }
  },

  // temperature
  'electrical.batteries.*.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // voltage
  'electrical.batteries.*.voltage': {
    baseUnit: 'V',
    category: 'voltage',
    conversions: {
      'V': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'V'
      },
      'mV': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mV'
      },
      'kV': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kV'
      }
    }
  },

  // stateOfCharge
  'electrical.batteries.0.capacity.stateOfCharge': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // current
  'electrical.batteries.0.current': {
    baseUnit: 'A',
    category: 'current',
    conversions: {
      'A': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'A'
      },
      'mA': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mA'
      },
      'kA': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kA'
      }
    }
  },

  // voltage
  'electrical.batteries.0.voltage': {
    baseUnit: 'V',
    category: 'voltage',
    conversions: {
      'V': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'V'
      },
      'mV': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mV'
      },
      'kV': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kV'
      }
    }
  },

  // panelVoltage
  'electrical.solar.*.panelVoltage': {
    baseUnit: 'V',
    category: 'voltage',
    conversions: {
      'V': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'V'
      },
      'mV': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mV'
      },
      'kV': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kV'
      }
    }
  },

  // panelPower
  'electrical.solar.0.panelPower': {
    baseUnit: 'W',
    category: 'power',
    conversions: {
      'W': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'W'
      },
      'kW': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kW'
      },
      'hp': {
        formula: 'value * 0.0013410220888438076',
        inverseFormula: 'value / 0.0013410220888438076',
        symbol: 'hp'
      },
      'MW': {
        formula: 'value * 0.000001',
        inverseFormula: 'value / 0.000001',
        symbol: 'MW'
      }
    }
  },

  // belowKeel
  'environment.depth.belowKeel': {
    baseUnit: 'm',
    category: 'depth',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      }
    }
  },

  // belowTransducer
  'environment.depth.belowTransducer': {
    baseUnit: 'm',
    category: 'depth',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      }
    }
  },

  // heave
  'environment.heave': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // pressure
  'environment.outside.pressure': {
    baseUnit: 'Pa',
    category: 'pressure',
    conversions: {
      'hPa': {
        formula: 'value * 0.01',
        inverseFormula: 'value / 0.01',
        symbol: 'hPa'
      },
      'mbar': {
        formula: 'value * 0.01',
        inverseFormula: 'value / 0.01',
        symbol: 'mbar'
      },
      'inHg': {
        formula: 'value * 0.00029529987601298443',
        inverseFormula: 'value / 0.00029529987601298443',
        symbol: 'inHg'
      },
      'mmHg': {
        formula: 'value * 0.0075006168507298',
        inverseFormula: 'value / 0.0075006168507298',
        symbol: 'mmHg'
      },
      'psi': {
        formula: 'value * 0.0001450376807894691',
        inverseFormula: 'value / 0.0001450376807894691',
        symbol: 'psi'
      },
      'bar': {
        formula: 'value * 0.00001',
        inverseFormula: 'value / 0.00001',
        symbol: 'bar'
      },
      'atm': {
        formula: 'value * 0.000009869232667160129',
        inverseFormula: 'value / 0.000009869232667160129',
        symbol: 'atm'
      }
    }
  },

  // temperature
  'environment.outside.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      'celsius': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C'
      },
      'fahrenheit': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // airTemperature
  'environment.outside.tempest.observations.airTemperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // feelsLike
  'environment.outside.tempest.observations.feelsLike': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // relativeHumidity
  'environment.outside.tempest.observations.relativeHumidity': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // stationPressure
  'environment.outside.tempest.observations.stationPressure': {
    baseUnit: 'Pa',
    category: 'pressure',
    conversions: {
      'hPa': {
        formula: 'value * 0.01',
        inverseFormula: 'value / 0.01',
        symbol: 'hPa'
      },
      'mbar': {
        formula: 'value * 0.01',
        inverseFormula: 'value / 0.01',
        symbol: 'mbar'
      },
      'inHg': {
        formula: 'value * 0.00029529987601298443',
        inverseFormula: 'value / 0.00029529987601298443',
        symbol: 'inHg'
      },
      'mmHg': {
        formula: 'value * 0.0075006168507298',
        inverseFormula: 'value / 0.0075006168507298',
        symbol: 'mmHg'
      },
      'psi': {
        formula: 'value * 0.0001450376807894691',
        inverseFormula: 'value / 0.0001450376807894691',
        symbol: 'psi'
      },
      'Pa': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'Pa'
      },
      'bar': {
        formula: 'value * 0.00001',
        inverseFormula: 'value / 0.00001',
        symbol: 'bar'
      },
      'atm': {
        formula: 'value * 0.000009869232667160129',
        inverseFormula: 'value / 0.000009869232667160129',
        symbol: 'atm'
      }
    }
  },

  // temperature
  'environment.rpi.cpu.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // utilisation
  'environment.rpi.cpu.utilisation': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // temperature
  'environment.rpi.gpu.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // utilisation
  'environment.rpi.memory.utilisation': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // uptime
  'environment.rpi.uptime': {
    baseUnit: 's',
    category: 'time',
    conversions: {
      's': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 's'
      },
      'min': {
        formula: 'value * 0.016666666666666666',
        inverseFormula: 'value / 0.016666666666666666',
        symbol: 'min'
      },
      'h': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'h'
      },
      'days': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'days'
      },
      'd': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'd'
      },
      'week': {
        formula: 'value * 0.000001653439153439154',
        inverseFormula: 'value / 0.000001653439153439154',
        symbol: 'week'
      }
    }
  },

  // temperature
  'environment.water.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      'celsius': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C'
      },
      'fahrenheit': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // height
  'environment.wave.height': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // period
  'environment.wave.period': {
    baseUnit: 's',
    category: 'time',
    conversions: {
      's': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 's'
      },
      'min': {
        formula: 'value * 0.016666666666666666',
        inverseFormula: 'value / 0.016666666666666666',
        symbol: 'min'
      },
      'h': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'h'
      },
      'd': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'd'
      },
      'week': {
        formula: 'value * 0.000001653439153439154',
        inverseFormula: 'value / 0.000001653439153439154',
        symbol: 'week'
      }
    }
  },

  // angleApparent
  'environment.wind.angleApparent': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // angleTrueGround
  'environment.wind.angleTrueGround': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // angleTrueWater
  'environment.wind.angleTrueWater': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // directionMagnetic
  'environment.wind.directionMagnetic': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // directionTrue
  'environment.wind.directionTrue': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // speedApparent
  'environment.wind.speedApparent': {
    baseUnit: 'm/s',
    category: 'speed',
    conversions: {
      'knots': {
        formula: 'value * 1.943844494119952',
        inverseFormula: 'value / 1.943844494119952',
        symbol: 'kn'
      },
      'km/h': {
        formula: 'value * 3.6',
        inverseFormula: 'value / 3.6',
        symbol: 'km/h'
      },
      'mph': {
        formula: 'value * 2.2369362920544025',
        inverseFormula: 'value / 2.2369362920544025',
        symbol: 'mph'
      },
      'm/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm/s'
      },
      'Beaufort': {
        formula: 'Math.pow(value / 0.836, 2/3)',
        inverseFormula: '0.836 * Math.pow(value, 1.5)',
        symbol: 'Bf'
      },
      'ft/s': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft/s'
      }
    }
  },

  // speedOverGround
  'environment.wind.speedOverGround': {
    baseUnit: 'm/s',
    category: 'speed',
    conversions: {
      'knots': {
        formula: 'value * 1.943844494119952',
        inverseFormula: 'value / 1.943844494119952',
        symbol: 'kn'
      },
      'km/h': {
        formula: 'value * 3.6',
        inverseFormula: 'value / 3.6',
        symbol: 'km/h'
      },
      'mph': {
        formula: 'value * 2.2369362920544025',
        inverseFormula: 'value / 2.2369362920544025',
        symbol: 'mph'
      },
      'm/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm/s'
      },
      'ft/s': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft/s'
      }
    }
  },

  // speedTrue
  'environment.wind.speedTrue': {
    baseUnit: 'm/s',
    category: 'speed',
    conversions: {
      'knots': {
        formula: 'value * 1.943844494119952',
        inverseFormula: 'value / 1.943844494119952',
        symbol: 'kn'
      },
      'km/h': {
        formula: 'value * 3.6',
        inverseFormula: 'value / 3.6',
        symbol: 'km/h'
      },
      'mph': {
        formula: 'value * 2.2369362920544025',
        inverseFormula: 'value / 2.2369362920544025',
        symbol: 'mph'
      },
      'm/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm/s'
      },
      'ft/s': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft/s'
      }
    }
  },

  // pitch
  'navigation.attitude.pitch': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // roll
  'navigation.attitude.roll': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // yaw
  'navigation.attitude.yaw': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // distance
  'navigation.courseGreatCircle.nextPoint.distance': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // courseOverGroundMagnetic
  'navigation.courseOverGroundMagnetic': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // courseOverGroundTrue
  'navigation.courseOverGroundTrue': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // datetime
  'navigation.datetime': {
    baseUnit: 'RFC 3339 (UTC)',
    category: 'dateTime',
    conversions: {
      'short-date': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'epoch-seconds': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      }
    }
  },

  // epoch
  'navigation.datetime.epoch': {
    baseUnit: 'Epoch Seconds',
    category: 'epoch',
    conversions: {
      'short-date': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/yyyy': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/yyyy-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'time-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'short-date-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'long-date-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'dd/mm/yyyy-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-24hrs': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-24hrs-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-am/pm': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      },
      'mm/dd/yyyy-am/pm-local': {
        formula: 'value',
        inverseFormula: 'value',
        symbol: ''
      }
    }
  },

  // antennaAltitude
  'navigation.gnss.antennaAltitude': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // differentialAge
  'navigation.gnss.differentialAge': {
    baseUnit: 's',
    category: 'time',
    conversions: {
      's': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 's'
      },
      'min': {
        formula: 'value * 0.016666666666666666',
        inverseFormula: 'value / 0.016666666666666666',
        symbol: 'min'
      },
      'h': {
        formula: 'value * 0.0002777777777777778',
        inverseFormula: 'value / 0.0002777777777777778',
        symbol: 'h'
      },
      'd': {
        formula: 'value * 0.000011574074074074073',
        inverseFormula: 'value / 0.000011574074074074073',
        symbol: 'd'
      },
      'week': {
        formula: 'value * 0.000001653439153439154',
        inverseFormula: 'value / 0.000001653439153439154',
        symbol: 'week'
      }
    }
  },

  // headingMagnetic
  'navigation.headingMagnetic': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // headingTrue
  'navigation.headingTrue': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // magneticVariation
  'navigation.magneticVariation': {
    baseUnit: 'rad',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 57.29577951308231',
        inverseFormula: 'value / 57.29577951308231',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'rad'
      }
    }
  },

  // altitude
  'navigation.position.altitude': {
    baseUnit: 'm',
    category: 'distance',
    conversions: {
      'm': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm'
      },
      'ft': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft'
      },
      'km': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'km'
      },
      'nm': {
        formula: 'value * 0.0005399568034557236',
        inverseFormula: 'value / 0.0005399568034557236',
        symbol: 'nm'
      },
      'mi': {
        formula: 'value * 0.000621371192237334',
        inverseFormula: 'value / 0.000621371192237334',
        symbol: 'mi'
      },
      'yd': {
        formula: 'value * 1.0936132983377078',
        inverseFormula: 'value / 1.0936132983377078',
        symbol: 'yd'
      },
      'cm': {
        formula: 'value * 100',
        inverseFormula: 'value / 100',
        symbol: 'cm'
      },
      'mm': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'mm'
      },
      'fathom': {
        formula: 'value * 0.5467468562055768',
        inverseFormula: 'value / 0.5467468562055768',
        symbol: 'fathom'
      }
    }
  },

  // latitude
  'navigation.position.latitude': {
    baseUnit: 'deg',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 0.0174532925199433',
        inverseFormula: 'value / 0.0174532925199433',
        symbol: 'rad'
      }
    }
  },

  // longitude
  'navigation.position.longitude': {
    baseUnit: 'deg',
    category: 'angle',
    conversions: {
      'deg': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: '째'
      },
      'rad': {
        formula: 'value * 0.0174532925199433',
        inverseFormula: 'value / 0.0174532925199433',
        symbol: 'rad'
      }
    }
  },

  // speedOverGround
  'navigation.speedOverGround': {
    baseUnit: 'm/s',
    category: 'speed',
    conversions: {
      'knots': {
        formula: 'value * 1.943844494119952',
        inverseFormula: 'value / 1.943844494119952',
        symbol: 'kn'
      },
      'km/h': {
        formula: 'value * 3.6',
        inverseFormula: 'value / 3.6',
        symbol: 'km/h'
      },
      'mph': {
        formula: 'value * 2.2369362920544025',
        inverseFormula: 'value / 2.2369362920544025',
        symbol: 'mph'
      },
      'm/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm/s'
      },
      'ft/s': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft/s'
      }
    }
  },

  // speedThroughWater
  'navigation.speedThroughWater': {
    baseUnit: 'm/s',
    category: 'speed',
    conversions: {
      'knots': {
        formula: 'value * 1.943844494119952',
        inverseFormula: 'value / 1.943844494119952',
        symbol: 'kn'
      },
      'km/h': {
        formula: 'value * 3.6',
        inverseFormula: 'value / 3.6',
        symbol: 'km/h'
      },
      'mph': {
        formula: 'value * 2.2369362920544025',
        inverseFormula: 'value / 2.2369362920544025',
        symbol: 'mph'
      },
      'ft/s': {
        formula: 'value * 3.280839895013124',
        inverseFormula: 'value / 3.280839895013124',
        symbol: 'ft/s'
      },
      'm/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm/s'
      }
    }
  },

  // devTemperature
  'network.wlan.*.status.devTemperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // cpuUsage
  'performance.cpuUsage': {
    baseUnit: 'tr',
    category: 'unitless',
    conversions: {
      'tr': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: 'tr'
      }
    }
  },

  // rate
  'propulsion.*.fuel.rate': {
    baseUnit: 'm3/s',
    category: 'volumeRate',
    conversions: {
      'L/h': {
        formula: 'value * 3599999.9999999995',
        inverseFormula: 'value / 3599999.9999999995',
        symbol: 'L/h'
      },
      'gal/h': {
        formula: 'value * 951019.3844696104',
        inverseFormula: 'value / 951019.3844696104',
        symbol: 'gal/h'
      },
      'gal(UK)/h': {
        formula: 'value * 951019.3844696104',
        inverseFormula: 'value / 951019.3844696104',
        symbol: 'gal(UK)/h'
      },
      'm3/s': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm3/s'
      },
      'L/s': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'L/s'
      },
      'L/min': {
        formula: 'value * 59999.99999999999',
        inverseFormula: 'value / 59999.99999999999',
        symbol: 'L/min'
      },
      'gal/s': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal/s'
      },
      'gal/min': {
        formula: 'value * 15850.323074493506',
        inverseFormula: 'value / 15850.323074493506',
        symbol: 'gal/min'
      }
    }
  },

  // temperature
  'propulsion.engine.*.coolant.temperature': {
    baseUnit: 'K',
    category: 'temperature',
    conversions: {
      '째C': {
        formula: 'value - 273.15',
        inverseFormula: 'value + 273.15',
        symbol: '째C',
        longName: 'celsius'
      },
      '째F': {
        formula: '(value - 273.15) * 9/5 + 32',
        inverseFormula: '(value - 32) * 5/9 + 273.15',
        symbol: '째F'
      },
      'kelvin': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      },
      'K': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'K'
      }
    }
  },

  // revolutions
  'propulsion.engine.*.revolutions': {
    baseUnit: 'Hz',
    category: 'frequency',
    conversions: {
      'rpm': {
        formula: 'value * 60',
        inverseFormula: 'value / 60',
        symbol: 'rpm'
      },
      'Hz': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'Hz'
      },
      'kHz': {
        formula: 'value * 0.001',
        inverseFormula: 'value / 0.001',
        symbol: 'kHz'
      },
      'MHz': {
        formula: 'value * 0.000001',
        inverseFormula: 'value / 0.000001',
        symbol: 'MHz'
      },
      'GHz': {
        formula: 'value * 1e-9',
        inverseFormula: 'value / 1e-9',
        symbol: 'GHz'
      }
    }
  },

  // tabula-rasa
  'tabula-rasa': {
    baseUnit: 'tr',
    category: 'unitless',
    conversions: {
      'tr': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: 'tr'
      }
    }
  },

  // currentLevel
  'tanks.*.*.apparent.currentLevel': {
    baseUnit: 'ratio',
    category: 'percentage',
    conversions: {
      'percent': {
        formula: 'value * 100',
        inverseFormula: 'value * 0.01',
        symbol: '%'
      },
      'ratio': {
        formula: 'value * 1',
        inverseFormula: 'value * 1',
        symbol: ''
      }
    }
  },

  // currentVolume
  'tanks.*.*.apparent.currentVolume': {
    baseUnit: 'm3',
    category: 'volume',
    conversions: {
      'L': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'L'
      },
      'gal': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal'
      },
      'gal(UK)': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal(UK)'
      },
      'm3': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm쨀'
      },
      'qt': {
        formula: 'value * 1056.688204966234',
        inverseFormula: 'value / 1056.688204966234',
        symbol: 'qt'
      },
      'pt': {
        formula: 'value * 2113.376409932468',
        inverseFormula: 'value / 2113.376409932468',
        symbol: 'pt'
      }
    }
  },

  // capacity
  'tanks.*.*.capacity': {
    baseUnit: 'm3',
    category: 'volume',
    conversions: {
      'L': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'L'
      },
      'gal': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal'
      },
      'gal(UK)': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal(UK)'
      },
      'm3': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm쨀'
      },
      'qt': {
        formula: 'value * 1056.688204966234',
        inverseFormula: 'value / 1056.688204966234',
        symbol: 'qt'
      },
      'pt': {
        formula: 'value * 2113.376409932468',
        inverseFormula: 'value / 2113.376409932468',
        symbol: 'pt'
      }
    }
  },

  // currentVolume
  'tanks.fuel.0.currentVolume': {
    baseUnit: 'm3',
    category: 'volume',
    conversions: {
      'L': {
        formula: 'value * 1000',
        inverseFormula: 'value / 1000',
        symbol: 'L'
      },
      'gal': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal'
      },
      'gal(UK)': {
        formula: 'value * 264.1720512415585',
        inverseFormula: 'value / 264.1720512415585',
        symbol: 'gal(UK)'
      },
      'qt': {
        formula: 'value * 1056.688204966234',
        inverseFormula: 'value / 1056.688204966234',
        symbol: 'qt'
      },
      'pt': {
        formula: 'value * 2113.376409932468',
        inverseFormula: 'value / 2113.376409932468',
        symbol: 'pt'
      },
      'm3': {
        formula: 'value * 1',
        inverseFormula: 'value / 1',
        symbol: 'm쨀'
      }
    }
  }

}

/**
 * Category to base unit mapping
 */
export const categoryToBaseUnit: Record<string, string> = {
  angle: 'rad',
  angularVelocity: 'rad/s',
  charge: 'C',
  current: 'A',
  dateTime: 'RFC 3339 (UTC)',
  depth: 'm',
  distance: 'm',
  epoch: 'Epoch Seconds',
  frequency: 'Hz',
  length: 'm',
  percentage: 'ratio',
  power: 'W',
  pressure: 'Pa',
  speed: 'm/s',
  temperature: 'K',
  time: 's',
  unitless: 'tr',
  voltage: 'V',
  volume: 'm3',
  volumeRate: 'm3/s'
}
